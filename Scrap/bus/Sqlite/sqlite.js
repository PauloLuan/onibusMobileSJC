/*

    BD SQLite feito com RingJS

    @author: PauloLuan

*/

addToClasspath(module.resolve('./sqlite-jdbc-3.6.16.jar'));

var driver = new Packages.org.sqlite.JDBC();

var connect = function (url, options) {
    var info = new Packages.java.util.Properties();
    for (var key in options) {
        info.setProperty(key, String(options[key]));
    }
    if (!driver.acceptsURL(url)) {
        throw new Error("SQLITE driver doesn't accept url '" + url + "'.");
    }
    var conn = driver.connect(url, info);
    return conn;
};

var open = function (path) {
    return connect("jdbc:sqlite:" + path);
};

var memory = function () {
    return connect("jdbc:sqlite::memory:")
};

var create = function () {
    try {
        var connection = this.open("/Users/funcatemobile/Desktop/onibus.sqlite");
        var statement = connection.createStatement();

        // Scripts generated by dbdsgnr.appspot.com
        statement.executeUpdate(
            "CREATE TABLE onibus ("+
                "json TEXT"+
            ");"

            /*"CREATE TABLE onibus ("+
                "nome TEXT, "+
                "id INTEGER PRIMARY KEY, "+
                "numero TEXT "+
            ");"+
            "CREATE TABLE horario ("+
                "id_onibus INTEGER, "+
                "tipo INTEGER, "+
                "horario TEXT, "+
                "sentido TEXT "+
            ");"*/
        );

        console.log("Criado com sucesso!")
    } catch (err) {
        // TODO: nicer exception handling - this is hard for the user to find
        throw new Error("Can't open '" + db + "' for writing.  Set GEOEXPLORER_DATA to a writable directory.");
    } finally {
        connection.close();
    }
}

var initialize = function () {
    try {
        var connection = this.open("/Users/funcatemobile/Desktop/onibus.sqlite");

        var prep = connection.prepareStatement(
            "INSERT INTO onibus (json) VALUES (?);"
            );
        var json = require("./items.json");
        var jsonString = JSON.stringify(json);
        prep.setString(1, jsonString);
        prep.executeUpdate();

        var statement = connection.createStatement();
        var results = statement.executeQuery("SELECT * FROM onibus;");

        while (results.next()) {
            console.log("JSON Salvo no BD!: " + results.getString("json"))
        }
    } finally {
        connection.close();
    }
}

exports.create = create;
exports.initialize = initialize;
exports.open = open;
exports.memory = memory;